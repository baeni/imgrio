@attribute [Route(Constants.PathToUserFiles)]
@attribute [Authorize]
@using Imgrio.Blazor.Backend.Models;
@using Imgrio.Blazor.Backend.Services;
@using System.Security.Claims;
@using Imgrio.Blazor.Backend.Utils;
@using Microsoft.AspNetCore.Identity;

<h1 class="mb-4 text-4xl font-bold leading-none tracking-tight">Meine Dateien</h1>

@if (GroupedUserFiles.Count() <= 0)
{
    <p class="text-muted">Du scheinst noch keine Dateien hochgeladen zu haben. Wenn du das ändern möchtest, kannst du das <a href="@Constants.PathToFileUpload">hier</a> oder via <a href="@Constants.PathToSharex">ShareX</a> tun!</p>
}
else
{
    @foreach (var group in GroupedUserFiles)
    {
        <p class="mb-2 text-lg font-bold leading-none tracking-tight">@group.Key.ToString("dd.MM.yyyy")</p>

        <div class="grid sm:grid-cols-1 lg:grid-cols-2 gap-3 mb-5">
            @foreach (var userFile in group.ToList())
            {
                <div class="flex flex-col items-center bg-white border border-gray-200 rounded-lg shadow md:flex-row md:max-w-xl dark:border-gray-700 dark:bg-gray-800">
                    <div class="sm:h-8 sm:w-8 lg:h-32 lg:w-32">
                        @if (userFile.Extension == "png" || userFile.Extension == "jpg" || userFile.Extension == "jpeg")
                        {
                            <img class="object-cover h-full w-full" title="@userFile.Title" src="@userFile.Url">
                        }
                        else
                        {
                            <p class="h4 d-flex align-items-center justify-content-center text-muted">@userFile.Extension.ToUpper()</p>
                        }
                    </div>
                    <div class="flex flex-col justify-between p-4 leading-normal">
                        <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">@userFile.Title</h5>


                        <a href="@($"{Constants.PathToFileView}{userFile.Id}")" class="inline-flex items-center font-medium text-blue-600 dark:text-blue-500 hover:underline">
                            Ansehen
                            <svg aria-hidden="true" class="w-5 h-5 ml-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                        </a>
                    </div>
                </div>
            }
        </div>
    }
}

@code {
    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    [Inject]
    public UserManager<IdentityUser> UserManager { get; set; } = null!;

    [Inject]
    public UserFileService UserFileService { get; set; } = null!;

    private IEnumerable<IGrouping<DateTime, UserFile>> GroupedUserFiles { get; set; } = Enumerable.Empty<IGrouping<DateTime, UserFile>>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        GroupedUserFiles = (await UserFileService.GetUserFilesAsync(user!))
                                .OrderByDescending(userFile => userFile.UploadedAt)
                                .GroupBy(userFile => userFile.UploadedAt.Date); ;
    }
}