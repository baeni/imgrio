@page "/u/files"
@using Firebase.Auth;
@using Imgrio.Blazor.Backend.Models;
@using Imgrio.Blazor.Backend.Services;
@using System.Security.Claims;
@using Imgrio.Blazor.Backend.Utils;
@attribute [Authorize]

<h1>Meine Dateien</h1>

@foreach (var group in GroupedUserFiles)
{
    <h3>@group.Key.ToString("dd.MM.yyyy")</h3>

    <div class="row g-2">
        @foreach (var userFile in group.ToList())
        {
            <div class="col-sm-12 col-lg-6">
                <div class="card">
                    <div class="card-body row">
                        <div class="col">
                            <a class="card-title h1 text-reset" href="/f/@userFile.Id">@userFile.Title</a>
                            <p class="card-text">@userFile.UploadedAt.ToRelativeDateString()</p>
                        </div>
                        <div class="col-auto">
                            <button class="btn btn-close" aria-label="Delete"></button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    [Inject]
    public UserFileService UserFileService { get; set; } = null!;

    private ClaimsPrincipal AuthUser { get; set; } = null!;

    private IEnumerable<IGrouping<DateTime, UserFile>> GroupedUserFiles { get; set; } = Enumerable.Empty<IGrouping<DateTime, UserFile>>();

    protected override async Task OnInitializedAsync()
    {
        var AuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        AuthUser = AuthState.User;

        GroupedUserFiles = (await UserFileService.GetUserFiles())
                                .Where(userFile => userFile.UploadedBy == AuthUser.FindFirstValue(ClaimTypes.NameIdentifier))
                                .OrderByDescending(userFile => userFile.UploadedAt)
                                .GroupBy(userFile => userFile.UploadedAt.Date);
    }
}