@page "/u/files"
@using Firebase.Auth;
@using Imgrio.Blazor.Backend.Models;
@using Imgrio.Blazor.Backend.Services;
@using System.Security.Claims;
@using Imgrio.Blazor.Backend.Utils;
@attribute [Authorize]

<h1>Meine Dateien</h1>

@if (GroupedUserFiles.Count() <= 0)
{
    <p class="text-muted">Du scheinst noch keine Dateien hochgeladen zu haben. Wenn du das ändern möchtest, kannst du das <a href="/f/upload">hier</a> oder via <a href="/sharex">ShareX</a> tun!</p>
}
else
{
    @foreach (var group in GroupedUserFiles)
    {
        <p class="h5 text-muted mb-3">@group.Key.ToString("dd.MM.yyyy")</p>

        <div class="row g-2 mb-5">
            @foreach (var userFile in group.ToList())
            {
                <div class="col-sm-12 col-lg-6">
                    <div class="card" style="flex-direction: row;">
                        @if (userFile.Extension == "png" || userFile.Extension == "jpg" || userFile.Extension == "jpeg")
                        {
                            <img class="card-img-top w-25" src="@userFile.FileUrl" />
                        }
                        else
                        {
                            <h1>@userFile.Extension.ToUpper()</h1>
                        }
                        <div class="card-body">
                            <div class="card-title">
                                <p class="h5 mb-0">@userFile.Title</p>
                                <small class="text-muted">@userFile.UploadedAt.ToRelativeDateString()</small>
                            </div>
                            <div>
                                <a class="card-link" href="/f/@userFile.Id">Ansehen</a>
                                <a class="card-link" href="/f/@userFile.Id">Löschen</a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}

@code {
    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    [Inject]
    public UserFileService UserFileService { get; set; } = null!;

    private ClaimsPrincipal AuthUser { get; set; } = null!;

    private IEnumerable<IGrouping<DateTime, UserFile>> GroupedUserFiles { get; set; } = Enumerable.Empty<IGrouping<DateTime, UserFile>>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var AuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        AuthUser = AuthState.User;

        GroupedUserFiles = (await UserFileService.GetUserFiles())
                                .Where(userFile => userFile.UploadedBy == AuthUser.FindFirstValue(ClaimTypes.NameIdentifier))
                                .OrderByDescending(userFile => userFile.UploadedAt)
                                .GroupBy(userFile => userFile.UploadedAt.Date);
    }
}