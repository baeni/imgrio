@attribute [Route(Constants.PathToUserFiles)]
@attribute [Authorize]
@using Imgrio.Blazor.Backend.Models;
@using Imgrio.Blazor.Backend.Services;
@using System.Security.Claims;
@using Imgrio.Blazor.Backend.Utils;
@using Microsoft.AspNetCore.Identity;

<h1 class="mb-4 text-4xl font-bold leading-none tracking-tight">Meine Dateien</h1>

@if (GroupedUserFiles.Count() <= 0)
{
    <p class="text-muted">Du scheinst noch keine Dateien hochgeladen zu haben. Wenn du das ändern möchtest, kannst du das <a href="@Constants.PathToFileUpload">hier</a> oder via <a href="@Constants.PathToSharex">ShareX</a> tun!</p>
}
else
{
    @foreach (var group in GroupedUserFiles)
    {
        <h2 class="mb-1 text-md font-bold text-neutral-500 dark:text-white">@group.Key.ToString("dd.MM.yyyy")</h2>

        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 mb-5">
            @foreach (var userFile in group.ToList())
            {
                <a href="@($"{Constants.PathToFileView}{userFile.Id}")" class="flex flex-row items-center overflow-hidden bg-white border border-neutral-200 rounded-lg shadow md:max-w-xl dark:border-neutral-700 dark:bg-neutral-800">
                    <div class="flex flex-col items-center h-24 w-24">
                        @if (userFile.Extension == "png" || userFile.Extension == "jpg" || userFile.Extension == "jpeg")
                        {
                            <img title="@userFile.Title" src="@userFile.Url" class="object-cover h-full w-full">
                        }
                        else
                        {
                            <span title="@userFile.Title" class="h-full w-full text-2xl font-medium text-neutral-300 bg-neutral-100 dark:text-neutral-600 dark:bg-neutral-700">@userFile.Extension.ToUpper()</span>
                        }
                    </div>
                    <h3 class="px-4 truncate text-xl font-bold">@userFile.Title</h3>
                </a>
            }
        </div>
    }
}

@code {
    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    [Inject]
    public UserManager<IdentityUser> UserManager { get; set; } = null!;

    [Inject]
    public UserFileService UserFileService { get; set; } = null!;

    private IEnumerable<IGrouping<DateTime, UserFile>> GroupedUserFiles { get; set; } = Enumerable.Empty<IGrouping<DateTime, UserFile>>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        GroupedUserFiles = (await UserFileService.GetUserFilesAsync(user!))
                                .OrderByDescending(userFile => userFile.UploadedAt)
                                .GroupBy(userFile => userFile.UploadedAt.Date); ;
    }
}