@attribute [Route(Constants.PathToView + "{id:guid}")]
@using Blazored.Modal.Services;
@using Imgrio.Blazor.Backend.Interfaces;
@using Imgrio.Blazor.Backend.Models;
@using Imgrio.Blazor.Backend.Services;
@using Imgrio.Blazor.Backend.Utils;
@using Microsoft.AspNetCore.Identity;

@if (!_hasData)
{
    <div class="animate-pulse">
        <div class="flex flex-wrap justify-center my-5">
            <span class="h-96 w-3/4 bg-neutral-200 rounded-2xl shadow-xl shadow-neutral-300 mb-4"></span>
        </div>

        <div class="flex flex-wrap justify-center gap-y-4 gap-x-6">
            <div>
                <span class="block h-10 w-44 mb-1 rounded-full bg-neutral-300 dark:bg-white"></span>
                <span class="block h-4 w-48 rounded-full bg-neutral-200 dark:bg-neutral-700"></span>
            </div>
            <span class="block relative flex h-11 w-full items-center justify-center px-6 before:absolute before:inset-0 before:rounded-full before:bg-blue-500 before:transition before:duration-300 hover:before:scale-105 active:duration-75 active:before:scale-95 sm:w-40"></span>
        </div>
    </div>
}
else if (UserFile == null)
{
    <h1 class="mb-4 text-4xl font-bold leading-none tracking-tight">Vom Erdboden verschluckt</h1>

    <p>Ich habe überall gesucht, aber die angeforderte Datei ist mir dabei nicht begegnet... <a href="@Constants.PathToIndex" class="font-medium text-blue-500 hover:underline">Zurück</a>, zu einem sicheren Ort.</p>
}
else
{
    @if (UserFile.Extension == "png" || UserFile.Extension == "jpg" || UserFile.Extension == "jpeg")
    {
        <HeadContent>
            <meta property="og:image" content="@Path.Combine(Constants.AppUrl, UserFile.Url)">
            <meta name="twitter:image:src" content="@UserFile.Url">
            <meta name="twitter:card" content="summary_large_image">
        </HeadContent>
    }
    else
    {
        <HeadContent>
            <meta name="title" content="@UserFile.Extension" />
            <meta property="og:title" content="@UserFile.Extension" />
            <meta name="twitter:title" content="@UserFile.Extension" />

            <meta name="description" content="@_fancyUploadedAt">
            <meta property="og:description" content="@_fancyUploadedAt" />
            <meta name="twitter:description" content="@_fancyUploadedAt" />
        </HeadContent>
    }

    <div class="flex flex-wrap justify-center my-5">
        @if (UserFile.Extension == "png" || UserFile.Extension == "jpg" || UserFile.Extension == "jpeg")
        {
            <img src="@UserFile.Url" onerror="this.style.display='none'" class="object-cover mw-100 max-vh-85 rounded-2xl shadow-xl shadow-neutral-300 mb-4" />
        }
        else {
            <div class="flex flex-col items-center h-96 aspect-[2/3] bg-neutral-100 dark:bg-neutral-700">
                <span title="@UserFile.Title" class="m-auto text-2xl font-medium text-neutral-300 dark:text-neutral-600">@UserFile.Extension.ToUpper()</span>
            </div>
        }
    </div>

    <div class="flex flex-wrap justify-center gap-y-4 gap-x-6">
        <div>
            <h1 class="text-4xl font-bold leading-none tracking-tight">@UserFile.Title</h1>
            <p class="fs-5 text-muted">@_fancyUploadedAt</p>
        </div>
        <a href="@UserFile.Url" download class="relative flex h-11 w-full items-center justify-center px-6 before:absolute before:inset-0 before:rounded-full before:bg-blue-500 before:transition before:duration-300 hover:before:scale-105 active:duration-75 active:before:scale-95 sm:w-max">
            <span class="relative text-base font-semibold text-white">Herunterladen</span>
        </a>
        <AuthorizeView>
            <Authorized>
                @if (UserManager.GetUserId(context.User) == UserFile.UploadedBy)
                {
                    @*<button @onclick="() => ModalService.Show<DeleteModal>()" data-modal-target="popup-modal" data-modal-toggle="popup-modal" class="relative flex h-11 w-full items-center justify-center px-6 before:absolute before:inset-0 before:rounded-full before:border before:border-transparent before:bg-blue-500/10 before:bg-gradient-to-b before:transition before:duration-300 hover:before:scale-105 active:duration-75 active:before:scale-95 dark:before:border-gray-700 dark:before:bg-gray-800 sm:w-max">
                        <span class="text-neutral900 dark:text-white relative text-base font-semibold">Löschen</span>
                    </button>*@

                    <button @onclick="ToggleDeleteModal" data-modal-target="popup-modal" data-modal-toggle="popup-modal" class="relative flex h-11 w-full items-center justify-center px-6 before:absolute before:inset-0 before:rounded-full before:border before:border-transparent before:bg-blue-500/10 before:bg-gradient-to-b before:transition before:duration-300 hover:before:scale-105 active:duration-75 active:before:scale-95 dark:before:border-gray-700 dark:before:bg-gray-800 sm:w-max">
                        <span class="text-neutral900 dark:text-white relative text-base font-semibold">Löschen</span>
                    </button>

                    <div class="relative z-50 @DeleteModalCssClass" aria-labelledby="modal-title" role="dialog" aria-modal="true">
                        <!--
                          Background backdrop, show/hide based on modal state.

                          Entering: "ease-out duration-300"
                            From: "opacity-0"
                            To: "opacity-100"
                          Leaving: "ease-in duration-200"
                            From: "opacity-100"
                            To: "opacity-0"
                        -->
                        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>

                        <div class="fixed inset-0 z-10 overflow-y-auto">
                            <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
                                <!--
                                  Modal panel, show/hide based on modal state.

                                  Entering: "ease-out duration-300"
                                    From: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                                    To: "opacity-100 translate-y-0 sm:scale-100"
                                  Leaving: "ease-in duration-200"
                                    From: "opacity-100 translate-y-0 sm:scale-100"
                                    To: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                                -->
                                <div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
                                    <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                                        <div class="sm:flex sm:items-start">
                                            <div class="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                                                <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
                                                </svg>
                                            </div>
                                            <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                                                <h3 class="text-base font-semibold leading-6 text-gray-900" id="modal-title">Datei löschen</h3>
                                                <div class="mt-2">
                                                    <p class="text-sm text-gray-500">Bist du sicher, dass du diese Datei löschen möchtest? Es wird nicht mehr möglich sein, diese Datei wiederherzustellen.</p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
                                        <button @onclick="HandleDelete" class="inline-flex w-full justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 sm:ml-3 sm:w-auto">Löschen</button>
                                        <button @onclick="ToggleDeleteModal" class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto">Nein, doch nicht</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </Authorized>
        </AuthorizeView>
    </div>
}

@code {
    [Inject]
    public IWebHostEnvironment WebHostEnvironment { get; set; } = null!;

    [Inject]
    public UserFileService UserFileService { get; set; } = null!;

    [Inject]
    public UserManager<IdentityUser> UserManager { get; set; } = null!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    [CascadingParameter]
    public IModalService ModalService { get; set; } = null!;

    [Parameter]
    public Guid Id { get; set; }

    private UserFile? UserFile { get; set; }

    private bool _hasData;

    private string _fancyFileType = null!;
    private string _fancyFileSize = null!;
    private string _fancyUploadedAt = null!;

    private bool _showDeleteModal = false;
    private string DeleteModalCssClass => _showDeleteModal ? "block" : "hidden";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            UserFile = await UserFileService.GetUserFileAsync(Id);

            if (UserFile != null)
            {
                _fancyFileType = $"Dateityp: {UserFile.Extension.ToUpper()}";
                _fancyFileSize = $"Dateigröße: {UserFile.ToFormattedSizeString()}";
                _fancyUploadedAt = $"Hochgeladen am {UserFile.UploadedAt.ToString("dd.MM.yyyy")}";
            }

            _hasData = true;

            StateHasChanged();
        }
    }

    [Authorize]
    private async Task HandleDelete()
    {
        // TODO authorize user

        await UserFileService.DeleteUserFileAsync(Id);
        NavigationManager.NavigateTo(Constants.PathToDashboardFiles);
    }

    private void ToggleDeleteModal()
    {
        _showDeleteModal = !_showDeleteModal;
    }
}