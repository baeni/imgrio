@attribute [Route(Constants.PathToFileView + "{id:guid}")]
@using Imgrio.Blazor.Backend.Interfaces;
@using Imgrio.Blazor.Backend.Models;
@using Imgrio.Blazor.Backend.Services;
@using Imgrio.Blazor.Backend.Utils;

@if (UserFile == null)
{
    <p class="text-muted">Ich habe überall gesucht, aber die angeforderte Datei ist mir dabei nicht zu begegnet...</p>
}
else
{
    @if (UserFile.Extension == "png" || UserFile.Extension == "jpg" || UserFile.Extension == "jpeg")
    {
        <HeadContent>
            <meta property="og:image" content="@UserFile.Url">
            <meta name="twitter:image:src" content="@UserFile.Url">
            <meta name="twitter:card" content="summary_large_image">
        </HeadContent>
    }
    else
    {
        <HeadContent>
            <meta name="title" content="@UserFile.Extension" />
            <meta property="og:title" content="@UserFile.Extension" />
            <meta name="twitter:title" content="@UserFile.Extension" />

            <meta name="description" content="@fancyUploadedAt">
            <meta property="og:description" content="@fancyUploadedAt" />
            <meta name="twitter:description" content="@fancyUploadedAt" />
        </HeadContent>
    }

    <PageTitle>Datei ansehen</PageTitle>

    <div class="flex flex-wrap justify-center my-5">
        @if (UserFile.Extension == "png" || UserFile.Extension == "jpg" || UserFile.Extension == "jpeg")
        {
            <img class="mw-100 max-vh-85 rounded shadow-lg mb-4" src="@UserFile.Url" style="object-fit: cover;" />
        }
        else {
            <h1>@UserFile.Extension.ToUpper()</h1>
        }
    </div>

    <div class="row">
        <div class="col-sm-12 col-lg-6">
            <h1 class="mb-4 text-4xl font-bold leading-none tracking-tight">@UserFile.Title</h1>
            <p class="fs-5 text-muted">@fancyUploadedAt</p>
        </div>
        <div class="col-sm-12 col-lg-6">
            <a class="btn btn-dark" href="@UserFile.Url" download>Herunterladen</a>
        </div>
    </div>
}

@code {
    [Inject]
    public UserFileService UserFileService { get; set; } = null!;

    [Parameter]
    public Guid Id { get; set; }

    private string fancyFileType = null!;
    private string fancyFileSize = null!;
    private string fancyUploadedAt = null!;

    private UserFile? UserFile { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        UserFile = await UserFileService.GetUserFileAsync(Id);

        if(UserFile == null)
        {
            return;
        }

        fancyFileType = $"Dateityp: {UserFile.Extension.ToUpper()}";
        fancyFileSize = $"Dateigröße: {UserFile.ToFormattedSizeString()}";
        fancyUploadedAt = $"Hochgeladen am {UserFile.UploadedAt.ToString("dd.MM.yyyy")}";
    }
}