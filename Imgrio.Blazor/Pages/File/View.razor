@attribute [Route(Constants.PathToFileView + "{id:guid}")]
@using Imgrio.Blazor.Backend.Interfaces;
@using Imgrio.Blazor.Backend.Models;
@using Imgrio.Blazor.Backend.Services;
@using Imgrio.Blazor.Backend.Utils;
@using Microsoft.AspNetCore.Identity;

@if (UserFile == null)
{
    <p class="text-muted">Ich habe überall gesucht, aber die angeforderte Datei ist mir dabei nicht zu begegnet...</p>
}
else
{
    @if (UserFile.Extension == "png" || UserFile.Extension == "jpg" || UserFile.Extension == "jpeg")
    {
        <HeadContent>
            <meta property="og:image" content="@UserFile.Url">
            <meta name="twitter:image:src" content="@UserFile.Url">
            <meta name="twitter:card" content="summary_large_image">
        </HeadContent>
    }
    else
    {
        <HeadContent>
            <meta name="title" content="@UserFile.Extension" />
            <meta property="og:title" content="@UserFile.Extension" />
            <meta name="twitter:title" content="@UserFile.Extension" />

            <meta name="description" content="@fancyUploadedAt">
            <meta property="og:description" content="@fancyUploadedAt" />
            <meta name="twitter:description" content="@fancyUploadedAt" />
        </HeadContent>
    }

    <div class="flex flex-wrap justify-center my-5">
        @if (UserFile.Extension == "png" || UserFile.Extension == "jpg" || UserFile.Extension == "jpeg")
        {
            <img class="mw-100 max-vh-85 rounded-lg shadow-lg mb-4" src="@UserFile.Url" style="object-fit: cover;" />
        }
        else {
            <h1>@UserFile.Extension.ToUpper()</h1>
        }
    </div>

    <div class="flex flex-wrap justify-center gap-y-4 gap-x-6">
        <div>
            <h1 class="text-4xl font-bold leading-none tracking-tight">@UserFile.Title</h1>
            <p class="fs-5 text-muted">@fancyUploadedAt</p>
        </div>
        <a href="@UserFile.Url" download class="relative flex h-11 w-full items-center justify-center px-6 before:absolute before:inset-0 before:rounded-full before:bg-blue-500 before:transition before:duration-300 hover:before:scale-105 active:duration-75 active:before:scale-95 sm:w-max">
            <span class="relative text-base font-semibold text-white">Herunterladen</span>
        </a>
        <AuthorizeView>
            <Authorized>
                @if (UserManager.GetUserId(context.User) == UserFile.UploadedBy)
                {
                    <button @onclick="HandleDelete" class="relative flex h-11 w-full items-center justify-center px-6 before:absolute before:inset-0 before:rounded-full before:border before:border-transparent before:bg-blue-500/10 before:bg-gradient-to-b before:transition before:duration-300 hover:before:scale-105 active:duration-75 active:before:scale-95 dark:before:border-gray-700 dark:before:bg-gray-800 sm:w-max">
                        <span class="text-neutral900 dark:text-white relative text-base font-semibold">Löschen</span>
                    </button>
                }
            </Authorized>
        </AuthorizeView>
    </div>
}

@code {
    [Inject]
    public UserFileService UserFileService { get; set; } = null!;

    [Inject]
    public UserManager<IdentityUser> UserManager { get; set; } = null!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    [Parameter]
    public Guid Id { get; set; }

    private string fancyFileType = null!;
    private string fancyFileSize = null!;
    private string fancyUploadedAt = null!;

    private UserFile? UserFile { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        UserFile = await UserFileService.GetUserFileAsync(Id);

        if(UserFile == null)
        {
            return;
        }

        fancyFileType = $"Dateityp: {UserFile.Extension.ToUpper()}";
        fancyFileSize = $"Dateigröße: {UserFile.ToFormattedSizeString()}";
        fancyUploadedAt = $"Hochgeladen am {UserFile.UploadedAt.ToString("dd.MM.yyyy")}";
    }

    [Authorize]
    private async Task HandleDelete()
    {
        // TODO authorize user

        await UserFileService.DeleteUserFileAsync(Id);
        NavigationManager.NavigateTo(Constants.PathToUserFiles);
    }
}