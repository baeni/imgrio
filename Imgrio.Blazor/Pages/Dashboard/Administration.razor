@using Microsoft.AspNetCore.Identity;
@using PasswordGenerator;
@using SendGrid;
@using SendGrid.Helpers.Mail;
@attribute [Route(Constants.PathToDashboardAdministration)]
@attribute [Authorize(Roles = "Admin")]

<h1 class="mb-4 text-4xl font-bold leading-none tracking-tight">Administration</h1>

<h2 class="mb-2 text-2xl font-bold leading-none tracking-tight">Account Registrieren</h2>

<form class="space-y-4 md:space-y-6" @onsubmit="HandleRegistrationAsync">
    <div>
        <label for="username" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Nutzername</label>
        <input type="text" @bind="_username" name="username" id="username" placeholder="imgriuser" required class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
    </div>
    <div>
        <label for="email" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Email</label>
        <input type="email" @bind="_email" name="email" id="email" placeholder="imgriouser@email.de" required class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
    </div>

    <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert">
        <p class="font-bold">Bist du sicher?</p>
        <p>Es ist wichtig, dass der Zugang zur Plattform nur ausgewählten und vertrauenswürdigen Personen gewährt wird.</p>
    </div>

    @if (!string.IsNullOrEmpty(_alert))
    {
        <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4" role="alert">
            <p class="font-bold">Erfolgreich</p>
            <p>@_alert</p>
        </div>
    }

    <button type="submit" class="relative flex h-11 w-full items-center justify-center px-6 before:absolute before:inset-0 before:rounded-full before:bg-blue-500 before:transition before:duration-300 hover:before:scale-105 active:duration-75 active:before:scale-95 sm:w-max mt-3">
        <span class="relative text-base font-semibold text-white">
            Account erstellen
        </span>
    </button>
</form>

@code {
    [Inject]
    public UserManager<IdentityUser> UserManager { get; set; } = null!;

    private string _alert = string.Empty;

    private string _username = string.Empty;

    private string _email = string.Empty;

    private string _password = new Password().Next();

    private async Task HandleRegistrationAsync()
    {
        _alert = string.Empty;

        var identity = new IdentityUser { UserName = _username, Email = _email };
        var result = await UserManager.CreateAsync(identity, _password);
        if (result.Succeeded)
        {
            _alert = "Account wurde erfolgreich erstellt.";

            var apiKey = Environment.GetEnvironmentVariable("SENDGRID_API_KEY");
            var client = new SendGridClient(apiKey);

            var from = new EmailAddress(Constants.AppContact, "imgrio");
            var to = new EmailAddress(_email);
            var subject = "Dein imgrio Account!";
            var plainTextContent = $"Für deine Email wurde ein imgrio Account erstellt!{Environment.NewLine} Dein Passwort: {_password}";
            var htmlContent = $"<strong>Für deine Email wurde ein imgrio Account erstellt!{Environment.NewLine} Dein Passwort: {_password}</strong>";
            var msg = MailHelper.CreateSingleEmail(from, to, subject, plainTextContent, htmlContent);
            var response = await client.SendEmailAsync(msg);
        }
    }
}
