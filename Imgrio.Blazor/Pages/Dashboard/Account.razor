@attribute [Route(Constants.PathToDashboardAccount)]
@attribute [Authorize]
@using Microsoft.AspNetCore.Identity;

<h1 class="mb-4 text-4xl font-bold leading-none tracking-tight">Mein Account</h1>

<form class="pt-5 space-y-4 md:space-y-6" method="post">
    <div>
        <label for="username" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Nutzername</label>
        <input type="text" name="username" id="username" placeholder="@_username" class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
    </div>
    <div>
        <label for="email" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Email</label>
        <input type="email" name="email" id="email" placeholder="@_email" class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
    </div>

    <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert">
        <p class="font-bold">Keine Funktionalität</p>
        <p>Die Funktionalität, seinen Nutzernamen und/oder die Email zu ändern, ist zurzeit noch nicht gegeben.</p>
    </div>

    <button type="submit" disabled class="cursor-not-allowed relative flex h-11 w-full items-center justify-center px-6 before:absolute before:inset-0 before:rounded-full before:bg-blue-500 before:transition before:duration-300 hover:before:scale-105 active:duration-75 active:before:scale-95 sm:w-max mt-3">
        <span class="relative text-base font-semibold text-white">
            Änderungen Speichern
        </span>
    </button>
</form>

@code {
    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    [Inject]
    public UserManager<IdentityUser> UserManager { get; set; } = null!;

    private string _username = string.Empty;
    private string _email = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);

            if (user != null)
            {
                _username = user.UserName!;
                _email = user.Email!;

                StateHasChanged();
            }
        }
    }
}